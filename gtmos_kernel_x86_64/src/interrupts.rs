use lazy_static::lazy_static;
use pic8259::ChainedPics;
use spin;
use x86_64::structures::idt::{InterruptDescriptorTable, InterruptStackFrame, PageFaultErrorCode};

use crate::gdt;

pub const PIC_1_OFFSET: u8 = 64;
pub const PIC_2_OFFSET: u8 = PIC_1_OFFSET + 8;

#[derive(Debug, Clone, Copy)]
#[repr(u8)]
pub enum InterruptIndex {
    Timer = PIC_1_OFFSET,
    Keyboard,
}

impl InterruptIndex {
    fn as_u8(self) -> u8 {
        self as u8
    }

    fn as_usize(self) -> usize {
        usize::from(self.as_u8())
    }
}

pub static PICS: spin::Mutex<ChainedPics> =
    spin::Mutex::new(unsafe { ChainedPics::new(PIC_1_OFFSET, PIC_2_OFFSET) });

lazy_static! {
    static ref IDT: InterruptDescriptorTable = {
        let mut idt = InterruptDescriptorTable::new();
        idt.divide_error.set_handler_fn(division_error_handler);
        idt.debug.set_handler_fn(debug_handler);
        idt.non_maskable_interrupt.set_handler_fn(non_maskable_interrupt_handler);
        idt.breakpoint.set_handler_fn(breakpoint_handler);
        idt.overflow.set_handler_fn(overflow_handler);
        idt.bound_range_exceeded.set_handler_fn(bound_range_exceeded_handler);
        idt.invalid_opcode.set_handler_fn(invalid_opcode_handler);
        idt.device_not_available.set_handler_fn(device_not_available_handler);
        unsafe {
            idt.double_fault
                .set_handler_fn(double_fault_handler)
                .set_stack_index(gdt::DOUBLE_FAULT_IST_INDEX);
        }
        idt.invalid_tss.set_handler_fn(invalid_tss_handler);
        idt.segment_not_present.set_handler_fn(segment_not_present_handler);
        idt.stack_segment_fault.set_handler_fn(stack_segment_fault_handler);
        idt.general_protection_fault.set_handler_fn(general_protection_fault_handler);
        idt.page_fault.set_handler_fn(page_fault_handler);
        idt.x87_floating_point.set_handler_fn(x87_floating_point_exception_handler);
        idt.alignment_check.set_handler_fn(alignment_check_handler);
        idt.machine_check.set_handler_fn(machine_check_handler);
        idt.simd_floating_point.set_handler_fn(simd_floating_point_exception_handler);
        idt.virtualization.set_handler_fn(virtualisation_exception_handler);
        idt.hv_injection_exception.set_handler_fn(hypervisor_injection_exception_handler);
        idt.vmm_communication_exception.set_handler_fn(vmm_communication_exception_handler);
        idt.security_exception.set_handler_fn(security_exception_handler);
        idt[InterruptIndex::Timer.as_usize()].set_handler_fn(timer_interrupt_handler);
        // idt[InterruptIndex::Keyboard.as_usize()].set_handler_fn(keyboard_interrupt_handler);
        idt
    };
}

pub fn init_idt() {
    IDT.load();
}

extern "x86-interrupt" fn division_error_handler(stack_frame: InterruptStackFrame) {
    gtmos_kernel::serial_println!("EXCEPTION: DIVISION ERROR\n{:#?}", stack_frame);
}

extern "x86-interrupt" fn debug_handler(stack_frame: InterruptStackFrame) {
    gtmos_kernel::serial_println!("EXCEPTION: DEBUG\n{:#?}", stack_frame);
}

extern "x86-interrupt" fn non_maskable_interrupt_handler(stack_frame: InterruptStackFrame) {
    gtmos_kernel::serial_println!("EXCEPTION: NON-MASKABLE INTERRUPT\n{:#?}", stack_frame);
}

/// Handles a breakpoint exception. Breakpoint exceptions are generated by debuggers to pause the code.
///
/// ## Example
/// ```
/// x86_64::instructions::interrupts::int3();
/// ```
///
/// In this example the [`x86_64::instructions::interrupts::int3`] function from the [`x86_64`] crate is
/// used to generate a breakpoint exception.
extern "x86-interrupt" fn breakpoint_handler(stack_frame: InterruptStackFrame) {
    gtmos_kernel::serial_println!("EXCEPTION: BREAKPOINT\n{:#?}", stack_frame);
}

extern "x86-interrupt" fn overflow_handler(stack_frame: InterruptStackFrame) {
    gtmos_kernel::serial_println!("EXCEPTION: OVERFLOW\n{:#?}", stack_frame);
}

extern "x86-interrupt" fn bound_range_exceeded_handler(stack_frame: InterruptStackFrame) {
    gtmos_kernel::serial_println!("EXCEPTION: BOUND RANGE EXCEEDED\n{:#?}", stack_frame);
}

extern "x86-interrupt" fn invalid_opcode_handler(stack_frame: InterruptStackFrame) {
    gtmos_kernel::serial_println!("EXCEPTION: INVALID OPCODE\n{:#?}", stack_frame);
}

extern "x86-interrupt" fn device_not_available_handler(stack_frame: InterruptStackFrame) {
    gtmos_kernel::serial_println!("EXCEPTION: DEVICE NOT AVAILABLE\n{:#?}", stack_frame);
}

/// Handles a double fault exception.
///
/// ## Example
/// ```rust
/// unsafe {
///     *(0xdeadbeef as *mut u8) = 42;
/// };
/// ```
///
/// In this example a page fault occurs, but there is not page fault handler yet so a double fault
/// occurs.
extern "x86-interrupt" fn double_fault_handler(stack_frame: InterruptStackFrame, _error_code: u64) -> !{
    panic!("EXCEPTION: DOUBLE FAULT\n{:#?}", stack_frame);
}

extern "x86-interrupt" fn invalid_tss_handler(stack_frame: InterruptStackFrame, _error_code: u64) {
    gtmos_kernel::serial_println!("EXCEPTION: INVALID TSS\n{:#?}", stack_frame);
}

extern "x86-interrupt" fn segment_not_present_handler(stack_frame: InterruptStackFrame, _error_code: u64) {
    gtmos_kernel::serial_println!("EXCEPTION: SEGMENT NOT PRESENT\n{:#?}", stack_frame);
}

extern "x86-interrupt" fn stack_segment_fault_handler(stack_frame: InterruptStackFrame, _error_code: u64) {
    gtmos_kernel::serial_println!("EXCEPTION: STACK SEGMENT FAULT\n{:#?}", stack_frame);
}

extern "x86-interrupt" fn general_protection_fault_handler(stack_frame: InterruptStackFrame, _error_code: u64) {
    gtmos_kernel::serial_println!("EXCEPTION: GENERAL_PROTECTION_FAULT\n{:#?}", stack_frame);
}

extern "x86-interrupt" fn page_fault_handler(stack_frame: InterruptStackFrame, _error_code: PageFaultErrorCode) {
    gtmos_kernel::serial_println!("EXCEPTION: PAGE FAULT\n{:#?}", stack_frame);
}

extern "x86-interrupt" fn x87_floating_point_exception_handler(stack_frame: InterruptStackFrame) {
    gtmos_kernel::serial_println!("EXCEPTION: X87 FLOATING POINT EXCEPTION\n{:#?}", stack_frame);
}

extern "x86-interrupt" fn alignment_check_handler(stack_frame: InterruptStackFrame, _error_code: u64) {
    gtmos_kernel::serial_println!("EXCEPTION: ALIGNMENT CHECK\n{:#?}", stack_frame);
}

extern "x86-interrupt" fn machine_check_handler(stack_frame: InterruptStackFrame) -> ! {
    panic!("EXCEPTION: MACHINE CHECK\n{:#?}", stack_frame);
}

extern "x86-interrupt" fn simd_floating_point_exception_handler(stack_frame: InterruptStackFrame) {
    gtmos_kernel::serial_println!("EXCEPTION: SIMD FLOATING POINT EXCEPTION\n{:#?}", stack_frame);
}

extern "x86-interrupt" fn virtualisation_exception_handler(stack_frame: InterruptStackFrame) {
    gtmos_kernel::serial_println!("EXCEPTION: VIRTUALISATION EXCEPTION\n{:#?}", stack_frame);
}

extern "x86-interrupt" fn hypervisor_injection_exception_handler(stack_frame: InterruptStackFrame) {
    gtmos_kernel::serial_println!("EXCEPTION: HYPERVISOR INJECTION EXCEPTION\n{:#?}", stack_frame);
}

extern "x86-interrupt" fn vmm_communication_exception_handler(stack_frame: InterruptStackFrame, _error_code: u64) {
    gtmos_kernel::serial_println!("EXCEPTION: VMM COMMUNICATION EXCEPTION\n{:#?}", stack_frame);
}

extern "x86-interrupt" fn security_exception_handler(stack_frame: InterruptStackFrame, _error_code: u64) {
    gtmos_kernel::serial_println!("EXCEPTION: SECURITY EXCEPTION\n{:#?}", stack_frame);
}

/// Handles an interrupt from the Intel 8253 timer.
extern "x86-interrupt" fn timer_interrupt_handler(_stack_frame: InterruptStackFrame){
    gtmos_kernel::serial_print!("AAAAAAAAAAAA");
    panic!("sddsdssddsds");
}

#[test_case]
fn test_breakpoint_exception() {
    // invoke a breakpoint exception
    x86_64::instructions::interrupts::int3();
}
