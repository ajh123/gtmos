use lazy_static::lazy_static;
use pic8259::ChainedPics;
use spin;
use x86_64::structures::idt::{InterruptDescriptorTable, InterruptStackFrame};

use crate::gdt;

pub const PIC_1_OFFSET: u8 = 32;
pub const PIC_2_OFFSET: u8 = PIC_1_OFFSET + 8;

#[derive(Debug, Clone, Copy)]
#[repr(u8)]
pub enum InterruptIndex {
    Timer = PIC_1_OFFSET,
    Keyboard,
}

impl InterruptIndex {
    fn as_u8(self) -> u8 {
        self as u8
    }

    fn as_usize(self) -> usize {
        usize::from(self.as_u8())
    }
}

pub static PICS: spin::Mutex<ChainedPics> =
    spin::Mutex::new(unsafe { ChainedPics::new(PIC_1_OFFSET, PIC_2_OFFSET) });

lazy_static! {
    static ref IDT: InterruptDescriptorTable = {
        let mut idt = InterruptDescriptorTable::new();
        idt.breakpoint.set_handler_fn(breakpoint_handler);
        unsafe {
            idt.double_fault
                .set_handler_fn(double_fault_handler)
                .set_stack_index(gdt::DOUBLE_FAULT_IST_INDEX);
        }
        idt[InterruptIndex::Timer.as_usize()].set_handler_fn(timer_interrupt_handler);
        // idt[InterruptIndex::Keyboard.as_usize()].set_handler_fn(keyboard_interrupt_handler);
        idt
    };
}

pub fn init_idt() {
    IDT.load();
}

/// Handles a breakpoint exception. Breakpoint exceptions are generated by debuggers to pause the code.
///
/// ## Example
/// ```
/// x86_64::instructions::interrupts::int3();
/// ```
///
/// In this example the [`x86_64::instructions::interrupts::int3`] function from the [`x86_64`] crate is
/// used to generate a breakpoint exception.
extern "x86-interrupt" fn breakpoint_handler(stack_frame: InterruptStackFrame) {
    gtmos_kernel::serial_println!("EXCEPTION: BREAKPOINT\n{:#?}", stack_frame);
}

/// Handles a double fault exception.
///
/// ## Example
/// ```rust
/// unsafe {
///     *(0xdeadbeef as *mut u8) = 42;
/// };
/// ```
///
/// In this example a page fault occurs, but there is not page fault handler yet so a double fault
/// occurs.
extern "x86-interrupt" fn double_fault_handler(stack_frame: InterruptStackFrame, _error_code: u64) -> !{
    panic!("EXCEPTION: DOUBLE FAULT\n{:#?}", stack_frame);
}

/// Handles an interrupt from the Intel 8253 timer.
extern "x86-interrupt" fn timer_interrupt_handler(_stack_frame: InterruptStackFrame){
    gtmos_kernel::serial_print!("AAAAAAAAAAAA");
}

#[test_case]
fn test_breakpoint_exception() {
    // invoke a breakpoint exception
    x86_64::instructions::interrupts::int3();
}
